{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Untitled","provenance":[],"authorship_tag":"ABX9TyPM8PHCxIsuJKnSSZs0qvOv"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"77cU7uOk8IZJ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":225},"executionInfo":{"status":"ok","timestamp":1598817355600,"user_tz":300,"elapsed":2367,"user":{"displayName":"Jasmine Kala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjwDfBdcD5AOJ4e6GCnQyUbcxoBFCxOVuCCDuSF=s64","userId":"00838725295420950940"}},"outputId":"9d4ab87e-f06f-4f61-bbd9-07332bdb4204"},"source":["from tensorflow.python.client import device_lib\n","device_lib.list_local_devices()"],"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[name: \"/device:CPU:0\"\n"," device_type: \"CPU\"\n"," memory_limit: 268435456\n"," locality {\n"," }\n"," incarnation: 6669116599991921051, name: \"/device:XLA_CPU:0\"\n"," device_type: \"XLA_CPU\"\n"," memory_limit: 17179869184\n"," locality {\n"," }\n"," incarnation: 10632847684764144456\n"," physical_device_desc: \"device: XLA_CPU device\"]"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"code","metadata":{"id":"EmwwlIxD8QEW","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":121},"executionInfo":{"status":"ok","timestamp":1598817425203,"user_tz":300,"elapsed":1401,"user":{"displayName":"Jasmine Kala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjwDfBdcD5AOJ4e6GCnQyUbcxoBFCxOVuCCDuSF=s64","userId":"00838725295420950940"}},"outputId":"073ee5d2-4b83-4d78-df64-89fb970337a6"},"source":["! rm -rf csce_421_633_s20/\n","! git clone https://github.com/prafulla77/csce_421_633_s20.git\n","\n"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Cloning into 'csce_421_633_s20'...\n","remote: Enumerating objects: 34, done.\u001b[K\n","remote: Counting objects: 100% (34/34), done.\u001b[K\n","remote: Compressing objects: 100% (32/32), done.\u001b[K\n","remote: Total 34 (delta 13), reused 0 (delta 0), pack-reused 0\u001b[K\n","Unpacking objects: 100% (34/34), done.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wXH7XRf48g3g","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1598817444651,"user_tz":300,"elapsed":381,"user":{"displayName":"Jasmine Kala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjwDfBdcD5AOJ4e6GCnQyUbcxoBFCxOVuCCDuSF=s64","userId":"00838725295420950940"}},"outputId":"f2e88fe3-b4c8-4c05-e58f-7e68bd8df0a9"},"source":["!ls\n"],"execution_count":3,"outputs":[{"output_type":"stream","text":["csce_421_633_s20  sample_data\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"cGh0niBA8jDO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":225},"executionInfo":{"status":"ok","timestamp":1598817454261,"user_tz":300,"elapsed":363,"user":{"displayName":"Jasmine Kala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjwDfBdcD5AOJ4e6GCnQyUbcxoBFCxOVuCCDuSF=s64","userId":"00838725295420950940"}},"outputId":"dc027688-a60a-45e1-fc72-a58d69818436"},"source":["!ls -R"],"execution_count":4,"outputs":[{"output_type":"stream","text":[".:\n","csce_421_633_s20  sample_data\n","\n","./csce_421_633_s20:\n","'AD 47537198 07-19.pdf'     hw1_question1_train.csv   README.md\n"," cats-dogs-knn.txt\t    hw1_question2_dev.csv     table.pdf\n"," cats-dogs-perceptron.txt   hw1_question2_test.csv\n","\n","./sample_data:\n","anscombe.json\t\t      mnist_test.csv\n","california_housing_test.csv   mnist_train_small.csv\n","california_housing_train.csv  README.md\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wum4m90-8vmU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":208},"executionInfo":{"status":"ok","timestamp":1598817503983,"user_tz":300,"elapsed":355,"user":{"displayName":"Jasmine Kala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjwDfBdcD5AOJ4e6GCnQyUbcxoBFCxOVuCCDuSF=s64","userId":"00838725295420950940"}},"outputId":"06cec588-6c7d-4296-9670-7421052522ad"},"source":["import numpy as np\n","a = np.random.rand(5,5)  # Create matrix of shape (5,4) filled with rando values\n","print(a)\n","b = np.ones(4)   # Create vectors of 1s\n","print(np.zeros((4,2)))\n","print(b)\n","print(a.shape, b.shape)  # Check shape of arrays"],"execution_count":5,"outputs":[{"output_type":"stream","text":["[[0.72283699 0.43808272 0.38912382 0.40565986 0.9310647 ]\n"," [0.33171914 0.40133054 0.42929257 0.25948662 0.45352671]\n"," [0.93945021 0.93963836 0.52650145 0.09443323 0.08174053]\n"," [0.1209858  0.49414671 0.78886936 0.13599748 0.54198156]\n"," [0.92066105 0.30863347 0.50317651 0.78936913 0.38031486]]\n","[[0. 0.]\n"," [0. 0.]\n"," [0. 0.]\n"," [0. 0.]]\n","[1. 1. 1. 1.]\n","(5, 5) (4,)\n"],"name":"stdout"}]}]}